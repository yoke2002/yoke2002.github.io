<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>项目总结 on 白日幻想家</title>
    <link>https://yoke2002.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</link>
    <description>Recent content in 项目总结 on 白日幻想家</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>白日幻想家</copyright>
    <lastBuildDate>Tue, 21 Nov 2023 21:49:43 +0800</lastBuildDate>
    <atom:link href="https://yoke2002.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringBoot 博客项目总结</title>
      <link>https://yoke2002.github.io/posts/2023/11/springboot-project-summary-1/</link>
      <pubDate>Tue, 21 Nov 2023 21:49:43 +0800</pubDate>
      <guid>https://yoke2002.github.io/posts/2023/11/springboot-project-summary-1/</guid>
      <description>前言 从十月底开始，我一直在学习 Java 后端开发的知识。随着博客项目接近尾声，来对这段时间做一个阶段性小结，一个月以来，我从 Java 基础、MySQL、Java Web 学到 Mybatis、Spring、SpringMVC 以及 SpringBoot，还有项目中用到的 Spring Security、Mybatis Plus 和 Redis 等等。其实之前也接触过这里面的部分技术，写点简单的 Servlet，对于 Spring 全家桶概念还不是那么清楚，比如之前一直不知道 SpringMVC 是什么，再加上很久没有 coding，连 Java 最基本的 API 都忘得一干二净。因此，那时我决定从基础开始学习。一个月接触这么多，是因为不想浪费这么多时间，很多东西学了就忘了，以后估计也用不到，只有一些重要的东西值得花时间去探究原理，如并发编程和数据库等。至于 Spring，以后换个语言、换个公司，框架就换了。（当然也不是完全放弃，框架的思想，用到的设计模式、反射等知识也非常值得学习）
博客项目 既然学完了 SpringBoot，就可以开始找单体项目进行实战，如果不多写两个项目，直接去看微服务，大概率会摔个大跟头。我 Spring 全家桶都是跟一个 UP 主学的，刚好有项目的视频教程，把前面学习的东西都能用上，我就直接跟着他做了，接下来就总结一下我的收获（菜狗的自我反思属于是）。
数据库相关 在基础阶段，我认为有两个比较难的点：
数据库设计：如何准确理解需求，设计出对应的表，理清表之间的关系，设计好约束和外键。 联表查询：对于复杂的查询来说，涉及到多张表，如何准确地联表获得想要的数据。 我全程都是跟着老师的思路走，到现在为止，我仍然觉得它们是困难的，可能还是自己基础不牢，实战太少。因此，还是需要不断的实战和思考来提升自己这方面的能力。 项目搭建 这个项目是使用 Maven 搭建的，和以往不同，由于这个博客项目分为前台和后台，写在一起太复杂，但为了复用，把这个项目拆成了两个模块，继承父模块，能够统一管理依赖，并提高公共类的复用性。以前一直以为只有微服务项目才这样拆，原来单体项目也可以。 另外，之前创建项目时都是使用 IDEA 勾选添加依赖，现在是手动引入的（虽然是复制的），让我对整个项目的依赖了解更加清楚，知道每个依赖有什么作用。
登录和认证 这个项目的登录和认证引入了 Spring Security，一开始我在想，之前登录也不需要写多少代码呀，为什么要用一个这么复杂的库，所以刚开始时也是懵懵的，后来又在网上找别人的博客学习才勉强搞懂了一点。其实在简单的项目中用 Spring Security 确实没有必要，这个库很重，但是项目大起来了之后，登录和认证的流程也不会简单，这个时候使用就很合适。下面记录一下在这个项目中使用的步骤：
自定义登录接口，把用户的信息封装到 UsernamePasswordAuthenticationToken 中，调用 AuthenticationManager 对象的 authenticate 方法进行认证，如果认证通过，生成 token 返回给前端。 Spring Security 认证时是默认到内存中去取数据进行认证，所以需要自己实现 UserDetailsService 接口，让它去数据库中查数据，这里密码加密可以配置 passwordEncoder 为 BCryptPasswordEncoder。 最后就是有 token 时的校验，需要自定义一个 JWT 认证过滤器，它的工作是获取 token 并解析，得到 userId，封装成 Authentication 对象，这里调用的是 UsernamePasswordAuthenticationToken 三个参数的构造方法（登录时调用的是有两个参数的构造方法），存入 SecurityContextHolder，后面的过滤器就知道认证通过了。 附上一份配置代码：</description>
    </item>
  </channel>
</rss>
